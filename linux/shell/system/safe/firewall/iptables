
iptables

1，背景
	防火墙分为硬件的或者软件的防火墙两种，目前市面上比较常见的有3、4层的防火墙，叫网络层的防火墙，还有7层的防火墙，其实是代理层的网关。
	iptables的前身叫ipfirewall （内核1.x时代）,这是一个作者从freeBSD上移植过来的，能够工作在内核当中的，对数据包进行检测的一款简易
	访问控制工具。当内核发展到2.x系列的时候，软件更名为ipchains，它可以定义多条规则，将他们串起来，共同发挥作用，而现在，它叫做iptables，
	可以将规则组成一个列表，实现绝对详细的访问控制功能。他们都是工作在用户空间中，定义规则的工具，本身并不算是防火墙。它们定义的规则，
	可以让在内核空间当中的netfilter来读取，并且实现让防火墙工作。

2，相关概念
	2.1链（chains）是数据包传播的路径，每一条链其实就是众多规则中的一个检查清单，每一条链中可以有一条或数条规则。
		NetFilter规定的五个规则链，也被称为五个钩子函数（hook functions）：
		1.PREROUTING (路由前)
		2.INPUT (数据包流入口)
		3.FORWARD (转发管卡)
		4.OUTPUT(数据包出口)
		5.POSTROUTING（路由后）
	2.2表（tables）提供特定的功能，iptables内置了4个表，即filter表、nat表、mangle表和raw表，分别用于实现包过滤，网络地址转换、包重构(修改)和数据跟踪处理。
		1.filter 定义允许或者不允许的，一般只能做在3个链上：INPUT ，FORWARD ，OUTPUT
		2.nat 定义地址转换的 ，一般也只能做在3个链上：PREROUTING ，OUTPUT ，POSTROUTING
		3.mangle功能:修改报文原数据，5个链都可以做：PREROUTING，INPUT，FORWARD，OUTPUT，POSTROUTING
	2.3规则（rules）: 如果数据包头符合这样的条件，就这样处理这个数据包
		条件分别指定了源地址、目的地址、传输协议（如TCP、UDP、ICMP）和服务类型（如HTTP、FTP和SMTP）,可以采用（!）取反
		处理数据包放行（accept）、拒绝（reject）和丢弃（drop）
		配置防火墙的主要工作就是添加、修改和删除这些规则。
3，iptables定义规则:
	 格式：iptables [-t table] COMMAND chain CRETIRIA -j ACTION
		 -t table ：3个filter nat mangle
		 COMMAND：定义如何对规则进行管理
		 chain：指定你接下来的规则到底是在哪个链上操作的，当定义策略的时候，是可以省略的
		 CRETIRIA:指定匹配标准
		 -j ACTION :指定如何进行处理
4，COMMAND	  
	#链管理命令（这都是立即生效的）
	--policy  		-P chain target				Change policy on chain to target
	--flush   		-F [chain]					Delete all rules in  chain or all chains
	--new     		-N chain					Create a new user-defined chain
	--delete-chain	-X [chain]					Delete a user-defined chain
	--rename-chain	-E old-chain new-chain		Change chain name, (moving any references)
	--zero    		-Z [chain [rulenum]]		Zero counters in chain or all chains
	#规则管理命令
	--append  		-A chain					Append to chain
	--insert  		-I chain [rulenum]			Insert in chain as rulenum (default 1=first)
	--replace 		-R chain rulenum			Replace rule rulenum (1 = first) in chain
	--delete  		-D chain rulenum			Delete rule rulenum (1 = first) from chain
	--delete  		-D chain					Delete matching rule from chain
	--check   		-C chain					Check for the existence of a rule
	--list-rules 	-S [chain [rulenum]]		Print the rules in a chain or all chains
	#查看管理命令 “-L”
	--list    		-L [chain [rulenum]]		List the rules in a chain or all chains
		-n：		以数字的方式显示ip，它会将ip直接显示出来，如果不加-n，则会将ip反向解析成主机名。
		-v：		显示详细信息
		-vv
		-vvv 		越多越详细
		-x：		在计数器上显示精确值，不做单位换算
		--line-numbers	显示规则的行号
		-t nat		显示所有的关卡的信息
5，CRETIRIA
	--source		-s address[/mask][...]		source specification（源地址）
	--destination 	-d address[/mask][...]		destination specification（目标地址）
	--protocol		-p proto					protocol: by number or name, eg. `tcp'（协议类型）
	--in-interface 	-i input name[+]			network interface name ([+] for wildcard)（从这块网卡流入的数据）
	--out-interface -o output name[+]			network interface name ([+] for wildcard)（从这块网卡流出的数据）
	
	--ipv4			-4							Nothing (line is ignored by ip6tables-restore)
    --ipv6			-6							Error (line is ignored by iptables-restore)			
	--jump			-j target					target for rule (may load target extension)
	--goto      	-g chain					jump to chain with no return
	--match			-m match					extended match (may load extension)
	--numeric		-n							numeric output of addresses and ports
	--table			-t table					table to manipulate (default: `filter')
	--verbose		-v							verbose mode
	--version		-V							print package version.
	--wait			-w							wait for the xtables lock
	--line-numbers								print line numbers when listing
	--exact			-x							expand numbers (display exact values)
	--fragment		-f							match second or further fragments only
	--modprobe=<command>						try to insert modules using this command
	--set-counters PKTS BYTES					set the counter during insert/append
	#扩展匹配
		-p tcp :TCP协议的扩展。一般有三种扩展
			--dport XX-XX：指定目标端口,不能指定多个非连续端口,只能指定单个端口，比如：--dport 21  或者 --dport 21-23 (此时表示21,22,23)
			--sport：指定源端口
			--tcp-fiags：TCP的标志位（SYN,ACK，FIN,PSH，RST,URG）
				对于它，一般要跟两个参数：1.检查的标志位。2.必须为1的标志位：
				    --tcpflags syn,ack,fin,rst syn   =    --syn表示检查这4个位， 这4个位中syn必须为1，其他的必须为0。
				    所以这个意思就是用于检测三次握手的第一次包的。对于这种专门匹配第一包的SYN为1的包，还有一种简写方式，叫做--syn
		-p udp：UDP协议的扩展
			--dport
			--sport
		-p icmp：icmp数据报文的扩展
			--icmp-type：
				echo-request(请求回显)，一般用8 来表示
				所以 --icmp-type 8 匹配请求回显数据包
				echo-reply （响应的数据包）一般用0来表示
	#显式扩展（-m）
		-m 模块 ：扩展各种模块 列：-m multiport：表示启用多端口扩展之后我们就可以启用比如 --dports 21,23,80
			-m state 
				--state {NEW,ESTATBLISHED,INVALID,RELATED}  指定检测那种状态
					NEW：NEW状态的数据包说明这个数据包是收到的第一个数据包。比如收到一个SYN数据包(TCP第一次握手)，它是连接的第一个数据包，
					    就会匹配NEW状态。第一个包也可能不是SYN包，但它仍会被认为是NEW状态。
					ESTABLISHED：只要发送并接到应答，一个数据连接就从NEW变为ESTABLISHED,而且该状态会继续匹配这个连接后继数据包。
					RELATED：当一个连接和某个已处于ESTABLISHED状态的连接有关系时，就被认为是RELATED，也就是说，一个连接想要是RELATED的，
					    首先要有个ESTABLISHED的连接，这个ESTABLISHED连接再产生一个主连接之外的连接，这个新的连接就是RELATED。
					INVALID：INVALID状态说明数据包不能被识别属于哪个连接或没有任何状态。
			-m multiport 指定多端口号
				--sport
				--dport
				--ports
			-m iprange 指定IP段
				--src-range ip-ip
				--dst-range ip-ip
			-m connlimit 连接限定
				--comlimit-above # 限定大连接个数
			-m limit 现在连接速率，也就是限定匹配数据包的个数
				--limit  #指定速率 
				--limit-burst # 峰值速率，最大限定
			-m string 按字符串限定
				--algo bm|kmp  指定算法bm或kmp
				--string "STRING" 指定字符串本身
			-m time
				--datestart
				--datestop
				--timestart
				--timestop
				--weekdays
				--monthdays
			-m connlimit 连接数限制，一般可以实现控制某源ip地址发起来某连接个数的
				--connlimit-above number  #连接数的上限，如果某个连接数的个数超过为某个值之后（高于），通常用取反的方法来放行
			-m recent  （可以用来抵御DOS攻击）
				--name SSH
				–-name #设定列表名称，默认DEFAULT。 
				–-rsource #源地址，此为默认。 
				–-rdest #目的地址 
				–-seconds #指定时间内 
				–-hitcount #命中次数 
				–-set #将地址添加进列表，并更新信息，包含地址加入的时间戳。 
				–-rcheck #检查地址是否在列表，以第一个匹配开始计算时间。 
				–-update #和rcheck类似，以最后一个匹配计算时间。 
				–-remove #在列表里删除相应地址，后跟列表名称及地址。
				
6，ACTION
	DROP：悄悄丢弃一般我们多用DROP来隐藏我们的身份，以及隐藏我们的链表
	REJECT：明示拒绝
	ACCEPT：接受，custom_chain：转向一个自定义的链
	DNAT: 目标地址转换（将内部服务器公开至外部网络）需在PREROUTING做限制
		-j DNAT --to-destination IP:prot
	SNAT: 源地址转换（代理内部客户端访问外部网络）在POSTROUTING或OUTPUT链上来做规则限制
		-j SNAT --to-source IP
		-j MASQUERADE
	MASQUERADE：源地址伪装
	REDIRECT：重定向：主要用于实现端口重定向
	MARK：打防火墙标记的
	RETURN：返回，在自定义链执行完毕后使用返回，来返回原规则链。
	LOG 
		--log-prefix
	
7，常用规则
	# iptables -L -n 		#列出规则
	# iptables -F        	#清除预设表filter中的所有规则链的规则
	# iptables -X        	#清除预设表filter中使用者自定链中的规则
	# iptables -P INPUT DROP	#对INPUT链默认丢弃
	# iptables -p OUTPUT ACCEPT	#对OUTPUT链默认接受
	# iptables -p FORWARD DROP	#对FORWARD链默认丢弃
	# iptables -A INPUT -p tcp --dport 20 -j ACCEPT 	#开启20端口,启用FTP
	# iptables -A INPUT -p tcp --dport 21 -j ACCEPT 	#开启21端口,启用FTP
	# iptables -A INPUT -p tcp --dport 22 -j ACCEPT 	#开启22端口,启用远程SSH登陆,SFTP
	# iptables -A INPUT -p tcp --dport 53 -j ACCEPT 	#开启53端口,(常用DNS务器)
	# iptables -A INPUT -i lo -p all -j ACCEPT 			#允许loopback!(不然会导致DNS无法正常关闭等问题)(如果是INPUT DROP)
	# iptables -A INPUT -p tcp --dport 80 -j ACCEPT 	#开启80端口,(常用http服务)
	# iptables -A INPUT -p tcp --dport 25 -j ACCEPT 	#开启25端口,(常用邮件服务器)
	# iptables -A INPUT -p tcp --dport 110 -j ACCEPT 	#开启110端口,(常用邮件服务器)
	# iptables -A INPUT -p icmp -j ACCEPT				#允许icmp包通过,也就是允许ping,
	# iptables -A INPUT -s 192.168.0.3 -p tcp --dport 22 -j ACCEPT	#只允许192.168.0.3的机器进行SSH连接
	
	# iptables -A FORWARD -i eth0 -o eth1 -m state --state RELATED,ESTABLISHED -j ACCEPT
	# iptables -A FORWARD -i eth1 -o eh0 -j ACCEPT
	# iptables -A FORWARD -p TCP ! --syn -m state --state NEW -j DROP	#丢弃坏的TCP包
	# iptables -A FORWARD -f -m limit --limit 100/s --limit-burst 100 -j ACCEPT		#处理IP碎片数量,防止攻击,允许每秒100个
	# iptables -A FORWARD -p icmp -m limit --limit 1/s --limit-burst 10 -j ACCEPT	#设置ICMP包过滤,允许每秒1个包,限制触发条件是10个包.
	
	# /etc/rc.d/init.d/iptables save 					#保存设置
	### NAT表放火墙
	# iptables -t nat -L	#查看本机关于NAT的设置情况	 
	# iptables -t nat -L	#查看本机关于NAT的设置情况	 
		 
